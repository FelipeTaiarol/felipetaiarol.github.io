{
  "openapi": "3.0.0",
  "servers": [
    {
      "url": "https://api-staging.ruumapp.com/v1"
    }
  ],
  "info": {
    "description": "Ruum by SAP is project management as a service for sales teams â€“ we simplify & automate VAT team coordination across all your opportunities. Our simple promise: Spend less time babysitting and more time with your customers. We provide a simple API to integrate with Ruum.\n\n  This is an interactive API documentation which provides API specifications and API consumption examples. Please go ahead and try it our yourself!!\"\"\n \n Set up the Authorization\n 1. Click on Authorize\n 2. Please enter ' Basic YzRjOkFQTXB0bFdGY3FxbVQzUjFVM2oy '\n \nConsuming the API\n 1. Click on the method\n 2. Click on Try it out\n 3. Click on Execute\n 4. Created ruum will be avialable in https://open-staging.ruumapp.com\"\n \n",
    "version": "1.0.0-oas3",
    "title": "One Pager for 'Ruum by SAP' API integration",
    "termsOfService": "https://ruumapp.com/",
    "contact": {
      "email": "vidyashree.basavaraju@ruumapp.com"
    }
  },
  "externalDocs": {
    "description": "Find out more about 'Ruum By SAP'",
    "url": "https://ruumapp.com/"
  },
  "tags": [
    {
      "name": "ruum",
      "description": "Create, Query and Update ruum"
    }
  ],
  "security": [
    {
      "ApiKeyAuth": []
    }
  ],
  "paths": {
    "/ruums": {
      "post": {
        "tags": [
          "ruum"
        ],
        "summary": "Create a ruum",
        "description": "This will create a very simple ruum with minimum entities.\n\nA ruum is created with one participant and one section.\n\nPlease have a look at the Example Value and Model used for creation.\n",
        "operationId": "createRuum",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Access token does not have the required scope"
          },
          "405": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/createRuum"
        }
      },
      "get": {
        "tags": [
          "ruum"
        ],
        "summary": "Query to get a list of changes in a ruum",
        "description": "Returns a list of changes/update since a specified time period",
        "operationId": "getUpdates",
        "parameters": [
          {
            "name": "ruumId",
            "in": "path",
            "description": "ID of the ruum",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/queryRuum"
        }
      },
      "put": {
        "tags": [
          "ruum"
        ],
        "summary": "Update an existing ruum",
        "description": "This will update an existing ruum.\n\nPlease have a look at the Example Value and Model used for creation.      \n",
        "operationId": "updateRuum",
        "parameters": [
          {
            "name": "ruumId",
            "in": "path",
            "description": "ID of the ruum to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ruum not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/updateRuum"
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ruum": {
        "type": "object",
        "description": "structure to create a ruum",
        "properties": {
          "name": {
            "type": "string",
            "description": "(Mandatory) Name of the ruum",
            "example": "Manage Truck Delay"
          },
          "participants": {
            "type": "array",
            "description": "(Mandatory) A list of valid participants collaboration in the ruum, can be external as well",
            "items": {
              "type": "string",
              "description": "(Mandatory) A valid email id",
              "example": "vidyashree.basavaraju@sap.com"
            }
          },
          "sections": {
            "type": "array",
            "description": "(Mandatory) A valid email id",
            "items": {
              "$ref": "#/components/schemas/sectionItem"
            }
          }
        }
      },
      "sectionItem": {
        "type": "object",
        "description": "(Mandatory) A Section in a ruum",
        "properties": {
          "title": {
            "type": "string",
            "description": "(Mandatory) Title for the section",
            "example": "Find out alternative supply chain"
          },
          "content": {
            "type": "array",
            "description": "(Mandatory) Section details",
            "items": {
              "$ref": "#/components/schemas/content"
            }
          }
        }
      },
      "content": {
        "type": "object",
        "description": "(Mandatory) Section Contents details",
        "properties": {
          "type": {
            "type": "string",
            "description": "(Mandatory) content type",
            "example": "paragraph"
          },
          "text": {
            "type": "string",
            "description": "(Mandatory) content value",
            "example": "The delivery #BV3445468 is stuck in the snow, we might have to find an alternative"
          }
        }
      }
    },
    "requestBodies": {
      "createRuum": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ruum"
            }
          }
        },
        "description": "ruum that is created",
        "required": true
      },
      "queryRuum": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ruum"
            }
          }
        },
        "description": "ruum that we are querying for updates",
        "required": true
      },
      "updateRuum": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ruum"
            }
          }
        },
        "description": "ruum that needs to be updated",
        "required": true
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "authentication"
      }
    }
  }
}
